-- Calculate the running total of follower changes per month for the 'instagram' user
SELECT 
   month,
   change_in_followers,
   SUM(change_in_followers) OVER (
      ORDER BY month
   ) AS running_total
FROM
   social_media
WHERE
   username = 'instagram';

-- Retrieve each username's post count along with their minimum post count
SELECT 
   username,
   posts,
   FIRST_VALUE(posts) OVER (
      PARTITION BY username
      ORDER BY posts
   ) AS fewest_posts
FROM 
   social_media;

-- Retrieve each username's post count along with their maximum post count
SELECT
   username,
   posts,
   LAST_VALUE(posts) OVER (
      PARTITION BY username
      ORDER BY posts
      RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
   ) AS most_posts
FROM
   social_media;

-- Retrieve the number of streams for 'Lady Gaga' and the previous week's streams
SELECT
   artist,
   week,
   streams_millions,
   LAG(streams_millions, 1, 0) OVER (
      ORDER BY week 
   ) AS previous_week_streams 
FROM
   streams 
WHERE
   artist = 'Lady Gaga';

-- Calculate the weekly change in streams for 'Lady Gaga'
SELECT 
  artist, 
  week, 
  streams_millions,
  streams_millions - LAG(streams_millions, 1, streams_millions) OVER (
    ORDER BY week 
  ) AS streams_millions_change
FROM 
    streams
WHERE
    artist = 'Lady Gaga';

-- Determine the weekly change in streams and chart position for 'Lady Gaga'
SELECT
   artist,
   week,
   streams_millions,
   streams_millions - LAG(streams_millions, 1, streams_millions) OVER ( 
      PARTITION BY artist
      ORDER BY week 
   ) AS streams_millions_change,
   chart_position,
   LAG(chart_position, 1, chart_position) OVER ( 
      PARTITION BY artist
      ORDER BY week 
   ) - chart_position AS chart_position_change
FROM
   streams
WHERE 
   artist = 'Lady Gaga';

-- Calculates weekly change in streams (in millions) for each artist
SELECT
   artist,
   week,
   streams_millions,
   LEAD(streams_millions, 1) OVER (
      PARTITION BY artist
      ORDER BY week
   ) - streams_millions AS 'streams_millions_change'
FROM
   streams;

-- Calculates weekly changes in both streams (millions) and chart positions for each artist
SELECT
    artist, 
    week, 
    streams_millions, 
    LEAD(streams_millions, 1) OVER (
        PARTITION BY artist
        ORDER BY week 
    ) - streams_millions AS 'stream_millions_change',
    chart_position, 
    chart_position - LEAD(chart_position, 1) OVER (
        PARTITION BY artist
        ORDER BY week 
    ) AS 'chart_position_change'
FROM
    streams;

-- Assigns row numbers to each record sorted by streams in ascending order (lowest to highest)
SELECT 
   ROW_NUMBER() OVER (
      ORDER BY streams_millions
   ) AS 'row_num', 
   artist, 
   week,
   streams_millions
FROM
   streams;

-- Assigns row numbers to each record sorted by streams in descending order (highest to lowest)
SELECT 
  ROW_NUMBER() OVER (
    ORDER BY streams_millions DESC
  ) AS 'row_num', 
  artist, 
  week, 
  streams_millions
FROM 
  streams; 

-- Ranks all records based on streams in ascending order, assigning identical ranks to ties
SELECT 
   RANK() OVER (
      ORDER BY streams_millions 
   ) AS 'rank', 
   artist, 
   week,
   streams_millions
FROM
   streams;

-- Assigns weekly rankings to artists based on descending stream counts, restarting ranks each week
SELECT 
   RANK() OVER (
      PARTITION BY week
      ORDER BY streams_millions DESC
   ) AS 'rank', 
   artist, 
   week,
   streams_millions
FROM
   streams;


-- Divides all artists into 5 equal groups based on descending streams across the entire dataset
SELECT 
   NTILE(5) OVER (
      ORDER BY streams_millions DESC
   ) AS 'weekly_streams_group', 
   artist, 
   week,
   streams_millions
FROM
   streams;

-- Divides artists each week into quartiles (4 equal groups) based on descending streams, resetting each week
SELECT 
   NTILE(4) OVER (
      PARTITION BY week
      ORDER BY streams_millions DESC
   ) AS 'quartile', 
   artist, 
   week,
   streams_millions
FROM
   streams;



